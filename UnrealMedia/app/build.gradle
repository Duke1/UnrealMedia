apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId rootProject.ext.applicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        renderscriptTargetApi 21
        renderscriptSupportModeEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -frtti -fexceptions -DANDROID -Wno-unused-variable"
                arguments '-DANDROID_PLATFORM=android-30',
                        '-DANDROID_TOOLCHAIN=clang', '-DANDROID_STL=c++_shared',
                        '-DANDROID_TOOLCHAIN_NAME=arm-linux-androideabi-clang3.6'
            }
        }

        multiDexEnabled true

        ndk {
            //'x86', 'armeabi', 'armeabi-v7a', 'arm64-v8a'
            // stl 'stlport_static'
            abiFilters 'arm64-v8a'
        }

//        sourceSets {
//            main {
//                jniLibs.srcDir(['libs', '../../ffmpeg_build'])
//            }
//
//        }

        vectorDrawables.useSupportLibrary = true


        //指定room.schemaLocation生成的文件路径
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            //signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }


    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0-alpha4', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation "androidx.appcompat:appcompat:1.2.0"
    implementation "androidx.recyclerview:recyclerview:1.2.0"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "androidx.palette:palette-ktx:1.0.0"
    implementation "com.google.android.material:material:1.4.0-alpha02"
    implementation "androidx.media:media:1.3.0"

    // KTX 扩展程序列表  https://developer.android.google.cn/kotlin/ktx/extensions-list
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.ext.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.ext.lifecycleVersion"

    implementation "androidx.navigation:navigation-fragment-ktx:$rootProject.ext.navVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$rootProject.ext.navVersion"

    implementation "androidx.room:room-runtime:$rootProject.ext.roomVersion"
    annotationProcessor "androidx.room:room-compiler:$rootProject.ext.roomVersion"
    kapt "androidx.room:room-compiler:$rootProject.ext.roomVersion"

    implementation "com.squareup.okhttp3:okhttp:4.9.0"


    implementation 'com.google.code.gson:gson:2.8.6'
    testImplementation 'junit:junit:4.13.2'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"


    implementation "com.facebook.fresco:fresco:${rootProject.ext.frescoVersion}"
}


kapt {
    //指定room.schemaLocation生成的文件路径
    arguments {
        arg("room.schemaLocation", "$projectDir/schemas".toString())
    }
}
